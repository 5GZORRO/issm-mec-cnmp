# Copyright 2021 - 2022 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This template runs on the target cluster
#
# This template get called out from fiveg-subnet-configure Workflow defined in
# gitops github pointed by the channel
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: fiveg-subnet-configure
spec:
  templates:
  - name: handlerequest
    dag:
      tasks:
      - name: smf-register-upf
        template: smf-register-upf

      - name: smf-topology-upf
        template: smf-topology-upf

  - name: smf-register-upf
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import requests
        import sys

        def raise_for_status(r):
            http_error_msg = ''
            if 400 <= r.status_code < 500:
                http_error_msg = '%s Client Error: %s' % (r.status_code, r.reason)

            elif 500 <= r.status_code < 600:
                http_error_msg = '%s Server Error: %s' % (r.status_code, r.reason)

            return http_error_msg

        core_namespace = "{{workflow.parameters.core_namespace}}"
        smf_name = "{{workflow.parameters.smf_name}}"
        payload = {
          "up_nodes": {
            "upf-{{workflow.name}}": {
              "type": "UPF",
              "node_id": "{{workflow.parameters.upf_sbi}}",
              "sNssaiUpfInfos": [
                {
                  "sNssai": {
                    "sst": int("{{workflow.parameters.sst}}"),
                    "sd": "{{workflow.parameters.sd}}"
                  },
                  "dnnUpfInfoList": [
                    {
                      "dnn": "internet"
                    }
                  ]
                }
              ],
              "interfaces": [
                {
                  "interfaceType": "N3",
                  "endpoints": ["{{workflow.parameters.upf_up}}"],
                  "networkInstance": "internet"
                },
                {
                  "interfaceType": "N9",
                  "endpoints": ["{{workflow.parameters.upf_up}}"],
                  "networkInstance": "internet"
                }
              ]
            }
          }
        }

        pool = "{{workflow.parameters.pool}}"
        if pool != "0.0.0.0/16":
            sys.stdout.write('Add pool [%s]\n' % pool)
            # NOTE: UPF is related to a single slice
            payload["up_nodes"]["upf-{{workflow.name}}"]["sNssaiUpfInfos"][0]["dnnUpfInfoList"][0]["pools"] = [{"cidr": "{{workflow.parameters.pool}}"}]

        headers = {'Content-Type': 'application/json'}
        r= requests.post('http://%s.%s:8000/upi/v1/upf' % (smf_name, core_namespace),
            json=payload,
            headers=headers)
        sys.stdout.write('r.text [%s]\n' % r.text)
        error_msg = raise_for_status(r)
        if error_msg:
            raise Exception('%s. %s' % (error_msg, r.text))

  - name: smf-topology-upf
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import requests
        import sys

        def raise_for_status(r):
            http_error_msg = ''
            if 400 <= r.status_code < 500:
                http_error_msg = '%s Client Error: %s' % (r.status_code, r.reason)

            elif 500 <= r.status_code < 600:
                http_error_msg = '%s Server Error: %s' % (r.status_code, r.reason)

            return http_error_msg

        upf_name = "upf-{{workflow.name}}"
        core_namespace = "{{workflow.parameters.core_namespace}}"
        smf_name = "{{workflow.parameters.smf_name}}"
        group = "{{workflow.parameters.sst}}-{{workflow.parameters.sd}}"
        connectedFrom = "{{workflow.parameters.connectedFrom}}"
        sys.stdout.write('Input parameters. upf_name: "%s", core_namespace: "%s", smf_name: "%s", group: "%s", connectedFrom: "%s"\n'
                          % (upf_name, core_namespace, smf_name, group, connectedFrom))
        payload = {
            "A": connectedFrom,
            "B": upf_name
        }

        headers = {'Content-Type': 'application/json'}
        r= requests.put('http://%s.%s:8080/ue-routes/%s/topology' % (smf_name, core_namespace, group),
            json=payload,
            headers=headers)
        sys.stdout.write('r.text [%s]\n' % r.text)
        error_msg = raise_for_status(r)
        if error_msg:
            raise Exception('%s. %s' % (error_msg, r.text))
