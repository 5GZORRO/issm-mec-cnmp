# Copyright 2021 - 2022 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This template runs on the target cluster
#
# This template get called out from fiveg-core Workflow defined in
# gitops github pointed by the channel
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: fiveg-core
spec:
  templates:
  - name: handlerequest
    dag:
      tasks:
      - name: create-networks
        templateRef:
          name: network-template
          template: create-network
        arguments:
          parameters:
          - name: name
            value: "{{item.name}}"
          - name: master
            value: "{{item.master}}"
          - name: range
            value: "{{item.range}}"
          - name: start
            value: "{{item.start}}"
          - name: end
            value: "{{item.end}}"
        withParam: "{{workflow.parameters.networks}}"

      - name: create-mongo
        dependencies: [create-networks]
        templateRef:
          name: nf-template
          template: create-nf
        arguments:
          parameters:
          - name: nf_apiversion
            value: "5g.ibm.com/v1alpha1"
          - name: nf_kind
            value: Mongo
          - name: nf_name
            value: mongo-sample
          - name: success_condition
            value: "status.outputs.podname == mongo-sample"
          - name: nf_spec
            value: |
              {
                "config": {
                  "image": "{{workflow.parameters.registry}}/weit/mongo",
                  "image_init": "{{workflow.parameters.registry}}/weit/5ginitcontainer"
                }
              }
              
      - name: create-nrf
        dependencies: [create-mongo]
        templateRef:
          name: nf-template
          template: create-nf
        arguments:
          parameters:
          - name: nf_apiversion
            value: "5g.ibm.com/v1alpha1"
          - name: nf_kind
            value: Nrf
          - name: nf_name
            value: nrf-sample
          - name: success_condition
            value: "status.outputs.podname == nrf-sample"
          - name: nf_spec
            value: |
              {
                "config": {
                  "image": "{{workflow.parameters.registry}}/weit/free5gc-nrf:v3.1.1-tls",
                  "image_init": "{{workflow.parameters.registry}}/weit/5ginitcontainer",
                  "nrf_name": "nrf-sample",
                  "mnc": "93",
                  "mcc": "208",
                  "mongo_ip_address": "mongo-sample-sbi",
                  "port": "8000",
                }
              }

      - name: create-udr
        dependencies: [create-nrf]
        templateRef:
          name: nf-template
          template: create-nf
        arguments:
          parameters:
          - name: nf_apiversion
            value: "5g.ibm.com/v1alpha1"
          - name: nf_kind
            value: Udr
          - name: nf_name
            value: udr-sample
          - name: success_condition
            value: "status.outputs.podname == udr-sample"
          - name: nf_spec
            value: |
              {
                "config": {
                  "image": "{{workflow.parameters.registry}}/weit/free5gc-udr:v3.1.1-tls",
                  "image_init": "{{workflow.parameters.registry}}/weit/5ginitcontainer",
                  "udr_name": "udr-sample",
                  "nrf_ip_address": "nrf-sample-sbi",
                  "mongo_ip_address": "mongo-sample-sbi",
                  "nrf_port": "8000"
                }
              }

      - name: create-udm
        dependencies: [create-udr]
        templateRef:
          name: nf-template
          template: create-nf
        arguments:
          parameters:
          - name: nf_apiversion
            value: "5g.ibm.com/v1alpha1"
          - name: nf_kind
            value: Udm
          - name: nf_name
            value: udm-sample
          - name: success_condition
            value: "status.outputs.podname == udm-sample"
          - name: nf_spec
            value: |
              {
                "config": {
                  "image": "{{workflow.parameters.registry}}/weit/free5gc-udm:v3.1.1-tls",
                  "image_init": "{{workflow.parameters.registry}}/weit/5ginitcontainer",
                  "udm_name": "udm-sample",
                  "nrf_ip_address": "nrf-sample-sbi"
                }
              }

      - name: create-ausf
        dependencies: [create-udm]
        templateRef:
          name: nf-template
          template: create-nf
        arguments:
          parameters:
          - name: nf_apiversion
            value: "5g.ibm.com/v1alpha1"
          - name: nf_kind
            value: Ausf
          - name: nf_name
            value: ausf-sample
          - name: success_condition
            value: "status.outputs.podname == ausf-sample"
          - name: nf_spec
            value: |
              {
                "config": {
                  "image": "{{workflow.parameters.registry}}/weit/free5gc-ausf:v3.1.1-tls",
                  "image_init": "{{workflow.parameters.registry}}/weit/5ginitcontainer",
                  "ausf_name": "ausf-sample",
                  "nrf_ip_address": "nrf-sample-sbi",
                  "nrf_port": "8000"
                }
              }

      - name: create-nssf
        dependencies: [create-ausf]
        templateRef:
          name: nf-template
          template: create-nf
        arguments:
          parameters:
          - name: nf_apiversion
            value: "5g.ibm.com/v1alpha1"
          - name: nf_kind
            value: Nssf
          - name: nf_name
            value: nssf-sample
          - name: success_condition
            value: "status.outputs.podname == nssf-sample"
          - name: nf_spec
            value: |
              {
                "config": {
                  "image": "{{workflow.parameters.registry}}/weit/free5gc-nssf:v3.1.1-tls",
                  "image_init": "{{workflow.parameters.registry}}/weit/5ginitcontainer",
                  "nssf_name": "nssf-sample",
                  "nrf_ip_address": "nrf-sample-sbi",
                  "nrf_port": "8000",
                  "mnc": "93",
                  "mcc": "208"
                }
              }

      - name: create-amf
        dependencies: [create-nssf]
        templateRef:
          name: nf-template
          template: create-nf
        arguments:
          parameters:
          - name: nf_apiversion
            value: "5g.ibm.com/v1alpha1"
          - name: nf_kind
            value: Amf
          - name: nf_name
            value: amf-sample
          - name: success_condition
            value: "status.outputs.podname == amf-sample"
          - name: nf_spec
            value: |
              {
                "config": {
                  "image": "{{workflow.parameters.registry}}/weit/free5gc-amf:2443f63-tls",
                  "image_init": "{{workflow.parameters.registry}}/weit/5ginitcontainer",
                  "amf_name": "amf-sample",
                  "nrf_ip_address": "nrf-sample-sbi",
                  "nrf_port": "8000",
                  "mnc": "93",
                  "mcc": "208"
                }
              }

      - name: create-pcf
        dependencies: [create-amf]
        templateRef:
          name: nf-template
          template: create-nf
        arguments:
          parameters:
          - name: nf_apiversion
            value: "5g.ibm.com/v1alpha1"
          - name: nf_kind
            value: Pcf
          - name: nf_name
            value: pcf-sample
          - name: success_condition
            value: "status.outputs.podname == pcf-sample"
          - name: nf_spec
            value: |
              {
                "config": {
                  "image": "{{workflow.parameters.registry}}/weit/free5gc-pcf:v3.1.1-tls",
                  "image_init": "{{workflow.parameters.registry}}/weit/5ginitcontainer",
                  "pcf_name": "pcf-sample",
                  "nrf_ip_address": "nrf-sample-sbi",
                  "nrf_port": "8000",
                  "mongo_ip_address": "mongo-sample-sbi"    
                }
              }

      - name: create-smf
        dependencies: [create-pcf]
        templateRef:
          name: nf-template
          template: create-nf
        arguments:
          parameters:
          - name: nf_apiversion
            value: "5g.ibm.com/v1alpha1"
          - name: nf_kind
            value: Smf
          - name: nf_name
            value: smf-sample
          - name: success_condition
            value: "status.outputs.podname == smf-sample"
          - name: nf_spec
            value: |
              {
                "config": {
                  "image": "{{workflow.parameters.registry}}/weit/free5gc-smf:1399ff7-tls",
                  "image_ext": "{{workflow.parameters.registry}}/weit/free5gc-smf-ext:1399ff7-tls",
                  "image_init": "{{workflow.parameters.registry}}/weit/5ginitcontainer",
                  "smf_name": "smf-sample",
                  "nrf_ip_address": "nrf-sample-sbi",
                  "nrf_port": "8000",
                  up_nodes: [
                    { "name": "gNB",
                      "type": "AN"
                    }
                  ]
                }
              }

#      - name: register-ues
#        dependencies: [create-smf]
#        template: register-ues
#        arguments:
#          parameters:
#          - name: group
#            value: "1-010203"

      - name: create-webconsole
        dependencies: [create-mongo]
        templateRef:
          name: nf-template
          template: create-nf
        arguments:
          parameters:
          - name: nf_apiversion
            value: "5g.ibm.com/v1alpha1"
          - name: nf_kind
            value: Webconsole
          - name: nf_name
            value: webconsole-sample
          - name: success_condition
            value: "status.outputs.podname == webconsole-sample"
          - name: nf_spec
            value: |
              {
                "config": {
                  "image": "{{workflow.parameters.registry}}/weit/free5gc-webui:v3.1.1-tls",
                  "image_init": "{{workflow.parameters.registry}}/weit/5ginitcontainer",
                  "mongo_ip_address": "mongo-sample-sbi"
                  }
              }

  - name: register-ues
    inputs:
      parameters:
      - name: group
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import requests
        import sys

        def raise_for_status(r):
            http_error_msg = ''
            if 400 <= r.status_code < 500:
                http_error_msg = '%s Client Error: %s' % (r.status_code, r.reason)

            elif 500 <= r.status_code < 600:
                http_error_msg = '%s Server Error: %s' % (r.status_code, r.reason)

            return http_error_msg

        smf_name = "smf-sample"
        group = "{{inputs.parameters.group}}"
        sys.stdout.write('Input parameters. smf_name: "%s", group: "%s"\n'
                          % (smf_name, group))
        headers = {'Content-Type': 'application/json'}
        r= requests.post('http://%s:8080/ue-routes/%s/members/imsi-208930000000003' % (smf_name, group),
            headers=headers)
        sys.stdout.write('r.text [%s]\n' % r.text)
        error_msg = raise_for_status(r)
        if error_msg:
            raise Exception('%s. %s' % (error_msg, r.text))

        r= requests.post('http://%s:8080/ue-routes/%s/members/imsi-208930000000004' % (smf_name, group),
            headers=headers)
        sys.stdout.write('r.text [%s]\n' % r.text)
        error_msg = raise_for_status(r)
        if error_msg:
            raise Exception('%s. %s' % (error_msg, r.text))

        r= requests.post('http://%s:8080/ue-routes/%s/members/imsi-208930000000005' % (smf_name, group),
            headers=headers)
        sys.stdout.write('r.text [%s]\n' % r.text)
        error_msg = raise_for_status(r)
        if error_msg:
            raise Exception('%s. %s' % (error_msg, r.text))
